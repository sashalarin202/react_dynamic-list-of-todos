{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","query","selectedTodos","handleChange","event","target","name","value","setState","this","props","todos","selectUser","changeTaskStatus","visibleTodos","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","id","placeholder","map","classNames","key","checked","readOnly","onClick","userId","React","Component","request","url","fetch","then","response","json","CurrentUser","user","loadData","prevProps","data","email","phone","clearUser","App","selectedUserId","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e04b1adf.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    selectedTodos: 'All',\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, selectUser, changeTaskStatus } = this.props;\n    const { query, selectedTodos } = this.state;\n\n    const visibleTodos = todos.filter(todo => (\n      todo.title !== null\n      && todo.title.toLowerCase().includes(query.toLowerCase())\n    )).filter((todo) => {\n      switch (this.state.selectedTodos) {\n        case 'Active':\n          return !todo.completed;\n        case 'Completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label>\n          Search task:\n          {' '}\n          <input\n            type=\"text\"\n            className=\"input is-rounded\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n            id=\"search-query\"\n            placeholder=\"Enter the title\"\n          />\n        </label>\n        {' '}\n        <select\n          name=\"selectedTodos\"\n          value={selectedTodos}\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Active</option>\n          <option>Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => changeTaskStatus(todo.id)}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': !todo.completed },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User\n                  {' '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  selectUser: PropTypes.isRequired,\n  changeTaskStatus: PropTypes.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json());\n\nexport const getTodos = () => request('/todos');\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (user === null) {\n      return null;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"submit\"\n          onClick={() => this.props.clearUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos: todos.data });\n      });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  changeTaskStatus = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={(userId) => {\n              this.setState({ selectedUserId: userId });\n            }}\n            changeTaskStatus={this.changeTaskStatus}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}